<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王爵的技术博客</title>
  <subtitle>一个后端程序员的笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://biezhi.me/"/>
  <updated>2017-07-18T06:59:33.000Z</updated>
  <id>http://biezhi.me/</id>
  
  <author>
    <name>王爵nice</name>
    <email>biezhi.me@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跟上Java8 - 了解lambda</title>
    <link href="http://biezhi.me/2017/07/17/keep-up-with-java8-lambda.html"/>
    <id>http://biezhi.me/2017/07/17/keep-up-with-java8-lambda.html</id>
    <published>2017-07-16T16:00:00.000Z</published>
    <updated>2017-07-18T06:59:33.000Z</updated>
    
    <content type="html"><![CDATA[<p class="tc">
    <img src="/static/img/article/lambda-expression.png" class="image-bubble" width="500" height="180" title="lambda-expression">
</p>

<p>从<code>java8</code>出现以来<code>lambda</code>是最重要的特性之一，它可以让我们用简洁流畅的代码完成一个功能。
很长一段时间<code>java</code>被吐槽是冗余和缺乏函数式编程能力的语言，随着函数式编程的流行<code>java8</code>种也引入了
这种编程风格。在此之前我们都在写匿名内部类干这些事，但有时候这不是好的做法，本文中将介绍和使用<code>lambda</code>，
带你体验函数式编程的魔力。</p>
<h2 id="什么是lambda"><a href="#什么是lambda" class="headerlink" title="什么是lambda?"></a>什么是lambda?</h2><p>lambda表达式是一段可以传递的代码，它的核心思想是将面向对象中的传递数据变成传递行为。
我们回顾一下在使用java8之前要做的事，之前我们编写一个线程时是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Runnable r = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"do something."</span>);      </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也有人会写一个类去实现<code>Runnable</code>接口，这样做没有问题，我们注意这个接口中只有一个<code>run</code>方法，
当把<code>Runnable</code>对象给<code>Thread</code>对象作为构造参数时创建一个线程，运行后将输出<code>do something.</code>。
我们使用匿名内部类的方式实现了该方法。</p>
<blockquote>
<p>这实际上是一个代码即数据的例子，在<code>run</code>方法中是线程要执行的一个任务，但上面的代码中任务内容已经被规定死了。
当我们有多个不同的任务时，需要重复编写如上代码。</p>
</blockquote>
<p>设计匿名内部类的目的，就是为了方便 Java 程序员将代码作为数据传递。不过，匿名内部 类还是不够简便。
为了执行一个简单的任务逻辑，不得不加上 6 行冗繁的样板代码。那如果是<code>lambda</code>该怎么做?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">Runnable r = () -&gt; System.out.println(<span class="string">"do something."</span>);</div></pre></td></tr></table></figure>
<p>嗯，这代码看起来很酷，你可以看到我们用<code>()</code>和<code>-&gt;</code>的方式完成了这件事，这是一个没有名字的函数，也没有人和参数，再简单不过了。
使用<code>-&gt;</code>将参数和实现逻辑分离，当运行这个线程的时候执行的是<code>-&gt;</code>之后的代码片段，且编译器帮助我们做了类型推导；
这个代码片段可以是用<code>{}</code>包含的一段逻辑。下面一起来学习一下<code>lambda</code>的语法。</p>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>在<code>lambda</code>中我们遵循如下的表达式来编写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">expression = (variable) -&gt; action</div></pre></td></tr></table></figure>
<ul>
<li><strong>variable</strong>: 这是一个变量,一个占位符。像<code>x</code>,<code>y</code>,<code>z</code>,可以是多个变量。</li>
<li><strong>action</strong>: 这里我称它为<code>action</code>, 这是我们实现的代码逻辑部分,它可以是一行代码也可以是一个代码片段</li>
</ul>
<p>可以看到Java中lambda表达式的格式：参数、箭头、以及动作实现，当一个动作实现无法用一行代码完成，可以编写
一段代码用<code>{}</code>包裹起来。</p>
<p>lambda表达式可以包含多个参数,例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> sum = (x, y) -&gt; x + y;</div></pre></td></tr></table></figure>
<p>这时候我们应该思考这段代码不是之前的x和y数字相加，而是创建了一个函数，用来计算两个操作数的和。
后面用<code>int</code>类型进行接收，在lambda中为我们省略去了<code>return</code>。</p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>函数式接口是只有一个方法的接口，用作lambda表达式的类型。前面写的例子就是一个函数式接口，来看看jdk中的<code>Runnable</code>源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</div><div class="line">     * to create a thread, starting the thread causes the object's</div><div class="line">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</div><div class="line">     * thread.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</div><div class="line">     * take any action whatsoever.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span>     java.lang.Thread#run()</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只有一个抽象方法<code>run</code>，实际上你不写<code>public abstract</code>也是可以的，在接口中定义的方法都是<code>public abstract</code>的。
同时也使用注解<code>@FunctionalInterface</code>告诉编译器这是一个函数式接口，当然你不这么写也可以，标识后明确了这个函数中
只有一个抽象方法，当你尝试在接口中编写多个方法的时候编译器将不允许这么干。</p>
<h3 id="尝试函数式接口"><a href="#尝试函数式接口" class="headerlink" title="尝试函数式接口"></a>尝试函数式接口</h3><p>我们来编写一个函数式接口，输入一个年龄，判断这个人是否是成人。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionInterfaceDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@FunctionalInterface</span></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行Predicate判断</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> age       年龄</div><div class="line">     * <span class="doctag">@param</span> predicate Predicate函数式接口</div><div class="line">     * <span class="doctag">@return</span>          返回布尔类型结果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doPredicate</span><span class="params">(<span class="keyword">int</span> age, Predicate&lt;Integer&gt; predicate)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> predicate.test(age);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> isAdult = doPredicate(<span class="number">20</span>, x -&gt; x &gt;= <span class="number">18</span>);</div><div class="line">        System.out.println(isAdult);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这个例子我们很轻松的完成 <strong>是否是成人</strong> 的动作，其次判断是否是成人，在此之前我们的做法一般是编写一个
判断是否是成人的方法，是无法将 <strong>判断</strong> 共用的。而在本例只，你要做的是将 <strong>行为</strong> (判断是否是成人，或者是判断是否大于30岁)
传递进去，函数式接口告诉你结果是什么。</p>
<p>实际上诸如上述例子中的接口，伟大的jdk设计者为我们准备了<code>java.util.function</code>包</p>
<div>
    <img src="/static/img/article/java8-util-function-package.png" class="image-bubble" width="300" height="500" title="java8-util-function-package">
</div>

<p>我们前面写的<code>Predicate</code>函数式接口也是JDK种的一个实现，他们大致分为以下几类：</p>
<table>
<thead>
<tr>
<th>接口</th>
<th style="text-align:center">参数</th>
<th style="text-align:center">返回值</th>
<th>类别</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td>Consumer<t></t></td>
<td style="text-align:center">T</td>
<td style="text-align:center">void</td>
<td>消费型接口</td>
<td>输出一个值</td>
</tr>
<tr>
<td>Supplier<t></t></td>
<td style="text-align:center">None</td>
<td style="text-align:center">T</td>
<td>供给型接口</td>
<td>工厂方法</td>
</tr>
<tr>
<td>Function<t, r=""></t,></td>
<td style="text-align:center">T</td>
<td style="text-align:center">R</td>
<td>函数型接口</td>
<td>获得 Artist 对象的名字</td>
</tr>
<tr>
<td>Predicate<t></t></td>
<td style="text-align:center">T</td>
<td style="text-align:center">boolean</td>
<td>断言型接口</td>
<td>这张唱片已经发行了吗</td>
</tr>
</tbody>
</table>
<p><strong>消费型接口示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">donation</span><span class="params">(Integer money, Consumer&lt;Integer&gt; consumer)</span></span>&#123;</div><div class="line">    consumer.accept(money);  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    donation(<span class="number">1000</span>, money -&gt; System.out.println(<span class="string">"好心的麦乐迪为Blade捐赠了"</span>+money+<span class="string">"元"</span>)) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>供给型接口示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">supply</span><span class="params">(Integer num, Supplier&lt;Integer&gt; supplier)</span></span>&#123;</div><div class="line">       List&lt;Integer&gt; resultList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;()   ;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;num;x++)  </div><div class="line">           resultList.add(supplier.get());</div><div class="line">       <span class="keyword">return</span> resultList ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; list = supply(<span class="number">10</span>,() -&gt; (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>));</div><div class="line">    list.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>函数型接口示例</strong></p>
<p>转换字符串为<code>Integer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">convert</span><span class="params">(String str, Function&lt;String, Integer&gt; function)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> function.apply(str);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Integer value = convert(<span class="string">"28"</span>, x -&gt; Integer.parseInt(x));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>断言型接口示例</strong></p>
<p>筛选出只有2个字的水果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">filter</span><span class="params">(List&lt;String&gt; fruit, Predicate&lt;String&gt; predicate)</span></span>&#123;</div><div class="line">    List&lt;String&gt; f = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (String s : fruit) &#123;</div><div class="line">        <span class="keyword">if</span>(predicate.test(s))&#123;</div><div class="line">            f.add(s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; fruit = Arrays.asList(<span class="string">"香蕉"</span>, <span class="string">"哈密瓜"</span>, <span class="string">"榴莲"</span>, <span class="string">"火龙果"</span>, <span class="string">"水蜜桃"</span>);</div><div class="line">    List&lt;String&gt; newFruit = filter(fruit, (f) -&gt; f.length() == <span class="number">2</span>);</div><div class="line">    System.out.println(newFruit);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p>在Java语言中，一个接口中定义的方法必须由实现类提供实现。但是当接口中加入新的API时，
实现类按照约定也要修改实现，而Java8的API对现有接口也添加了很多方法，比如<code>List</code>接口中添加了<code>sort</code>方法。
如果按照之前的做法，那么所有的实现类都要实现<code>sort</code>方法，JDK的编写者们一定非常抓狂。</p>
<p>幸运的是我们使用了Java8，这一问题将得到很好的解决，在Java8种引入新的机制，<strong>支持在接口中声明方法同时提供实现</strong>。
这令人激动不已，你有两种方式完成 1.在接口内声明静态方法 2.指定一个默认方法。</p>
<p>我们来看看在JDK8中上述<code>List</code>接口添加方法的问题是如何解决的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</div><div class="line">    Object[] a = <span class="keyword">this</span>.toArray();</div><div class="line">    Arrays.sort(a, (Comparator) c);</div><div class="line">    ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</div><div class="line">    <span class="keyword">for</span> (Object e : a) &#123;</div><div class="line">        i.next();</div><div class="line">        i.set((E) e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>翻阅<code>List</code>接口的源码，其中加入一个默认方法<code>default void sort(Comparator&lt;? super E&gt; c)</code>。
在返回值之前加入<code>default</code>关键字，有了这个方法我们可以直接调用<code>sort</code>方法进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>);</div><div class="line">list.sort(Comparator.naturalOrder());</div><div class="line">System.out.println(list);</div></pre></td></tr></table></figure>
<p><code>Comparator.naturalOrder()</code>是一个自然排序的实现，这里可以自定义排序方案。
你经常看到使用Java8操作集合的时候可以直接foreach的原因也是在<code>Iterable</code>接口中也新增了一个默认方法：<code>forEach</code> ，
该方法功能和 for 循环类似，但是允许 用户使用一个<code>Lambda</code>表达式作为循环体。</p>
<p>在后面的章节中我们再次通过案例来展示函数式编程的魅力 :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;tc&quot;&gt;
    &lt;img src=&quot;/static/img/article/lambda-expression.png&quot; class=&quot;image-bubble&quot; width=&quot;500&quot; height=&quot;180&quot; title=&quot;lambda-expressi
    
    </summary>
    
      <category term="跟上Java8" scheme="http://biezhi.me/categories/%E8%B7%9F%E4%B8%8AJava8/"/>
    
    
      <category term="Java8" scheme="http://biezhi.me/tags/Java8/"/>
    
      <category term="lambda" scheme="http://biezhi.me/tags/lambda/"/>
    
  </entry>
  
  <entry>
    <title>跟上Java8系列文章 - 带你实战Java8</title>
    <link href="http://biezhi.me/2017/07/16/keep-up-with-java8.html"/>
    <id>http://biezhi.me/2017/07/16/keep-up-with-java8.html</id>
    <published>2017-07-15T16:00:00.000Z</published>
    <updated>2017-07-18T06:39:14.000Z</updated>
    
    <content type="html"><![CDATA[<p class="tc">
    <img src="/static/img/article/java8-banner.png" class="image-bubble" width="500" height="300" title="java8">
</p>

<p><code>Java8</code>从<code>2014</code>年出现至今已经三年有余，这里发布的新功能是自Java1.0发布18年来最大变化的。
没有去处任何API，我们仍然能兼容以前的代码，新功能中提供了更多的语法和设计，帮助开发者编写更清楚、简洁的代码。
Java8把函数式编程里一些最好的思想融入到大家熟知的Java语法中，让你用更少的时间写出高效代码。</p>
<p>而目前国内很多开发者的现状还处于<code>Java6</code>的语法之上，这确实没什么问题，可以保证你的企业软件稳定运行下去。
但时代总是变化的，我们熟悉的Spring框架也对java8做了更好的支持。
大势所趋，为何不跟上<code>Java8</code>的节奏一起体验现代高级编程语言中的新特性呢？
现在我可以带你深入浅出跟上<code>Java8</code>，这一系列文章写了那些我认为有用所关注的一些内容，如果你对更详细的细节感兴趣可以查阅相关书籍。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul>
<li>lambda表达式</li>
<li>stream流</li>
<li>optional</li>
<li>jvm优化</li>
<li>兼容老版本</li>
</ul>
<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ol>
<li><a href="/2017/07/17/keep-up-with-java8-lambda.html">跟上Java8 - 了解lambda</a></li>
<li><a href="/2017/07/18/keep-up-with-java8-stream.html">跟上Java8 - stream入门与实战</a></li>
<li><a href="/2017/07/19/keep-up-with-java8-functional-programming.html">跟上Java8 - 函数式编程</a></li>
<li><a href="/2017/07/20/keep-up-with-java8-datetime.html">跟上Java8 - 日期和时间最实用技巧</a></li>
<li><a href="/2017/07/21/keep-up-with-java8-features.html">跟上Java8 - 你忽略了的新特性</a></li>
<li><a href="/2017/07/22/keep-up-with-java8-concurrent.html">跟上Java8 - 使用lambda并发编程</a></li>
<li><a href="/2017/07/23/keep-up-with-java8-tips.html">跟上Java8 - 七七八八的黑科技</a></li>
<li><a href="/2017/07/24/keep-up-with-java8-optimizing.html">跟上Java8 - 优化工作中那些屎代码</a></li>
</ol>
<h2 id="资料分享"><a href="#资料分享" class="headerlink" title="资料分享"></a>资料分享</h2><ul>
<li><a href="http://winterbe.com/projects/java8-explorer" target="_blank" rel="external">在线查看Java8新增API</a></li>
<li><a href="https://github.com/shekhargulati/java8-the-missing-tutorial" target="_blank" rel="external">java8-the-missing-tutorial</a></li>
<li><a href="https://github.com/winterbe/java8-tutorial" target="_blank" rel="external">java8-tutorial</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;tc&quot;&gt;
    &lt;img src=&quot;/static/img/article/java8-banner.png&quot; class=&quot;image-bubble&quot; width=&quot;500&quot; height=&quot;300&quot; title=&quot;java8&quot;&gt;
&lt;/p&gt;

&lt;p&gt;&lt;co
    
    </summary>
    
      <category term="跟上Java8" scheme="http://biezhi.me/categories/%E8%B7%9F%E4%B8%8AJava8/"/>
    
    
      <category term="Java8" scheme="http://biezhi.me/tags/Java8/"/>
    
      <category term="系列" scheme="http://biezhi.me/tags/%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://biezhi.me/2017/07/15/hello-world.html"/>
    <id>http://biezhi.me/2017/07/15/hello-world.html</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2017-07-16T02:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客换了主题，以前的文章在github的分支上保存，以后在这里重新写点东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客换了主题，以前的文章在github的分支上保存，以后在这里重新写点东西。&lt;/p&gt;

    
    </summary>
    
    
      <category term="blog" scheme="http://biezhi.me/tags/blog/"/>
    
      <category term="hello-world" scheme="http://biezhi.me/tags/hello-world/"/>
    
  </entry>
  
</feed>
